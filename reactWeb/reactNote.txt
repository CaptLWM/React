//import Button from "./Button.js";
//import styles from "./App.module.css";
import { useState, useEffect } from "react";

function App() {
  const [counter, setValue] = useState(0);
  const onClick = () => setValue((prev) => prev + 1);
  console.log("i run all the time");
  //const iRunOnlyOne = () => {
  //console.log("i run only once.");
  //};
  //useEffect(iRunOnlyOne, []); // state가 변해도 단 한번만 실행 시키고 싶을때
  useEffect(() => {
    console.log("Call the API...");
  }, []); // 이렇게도 사용 가능
  return (
    <div>
      <h1>{counter}</h1>
      <button onClick={onClick}>click me</button>
    </div>
  );
}

export default App;
=======useEffect

//import Button from "./Button.js";
//import styles from "./App.module.css";
import { useState, useEffect } from "react";

function App() {
  const [counter, setValue] = useState(0);
  const [keyword, setKeyword] = useState("");
  const onClick = () => setValue((prev) => prev + 1);
  const onChange = (event) => setKeyword(event.target.value);
  useEffect(() => {
    console.log("I run only once");
  }, []); // 처음 시작할때만 동작
  useEffect(() => {
    //if (keyword !== "" && keyword.length > 5) {} 조건문 사용도 가능
    console.log("I run when 'keyword' changes");
  }, [keyword]); //keyword가 변화할때만 코드 실행
  useEffect(() => {
    console.log("I run when 'counter' changes");
  }, [counter]); // counter가 변화할때만 코드 실행
  useEffect(() => {
    console.log("I run when 'counter' and 'keyword' changes");
  }, [counter, keyword]); // counter혹은 keyword가 변화할때만 코드 실행
  return (
    <div>
      <input
        value={keyword}
        onChange={onChange}
        type="text"
        placehorder="Search here..."
      />
      <h1>{counter}</h1>
      <button onClick={onClick}>click me</button>
    </div>
  );
}

export default App;
=========Deps

//import Button from "./Button.js";
//import styles from "./App.module.css";
import { useState, useEffect } from "react";

function Hello() {
  function byeFn() {
    console.log("bye :<");
  }
  function hiFn() {
    console.log("hi :)");
    return byeFn; // cleanup Function
  }
  useEffect(hiFn, []);
  return <h1>hello</h1>;
}

function App() {
  const [showing, setShowing] = useState(false);
  const onClick = () => setShowing((prev) => !prev);
  return (
    <div>
      {showing ? <Hello /> : null}
      <button onClick={onClick}>{showing ? "Hide" : "Show"}</button>
    </div>
  );
}

export default App;
=========cleanup Function

import { useState } from "react";

function App() {
  const [toDo, setToDo] = useState("");
  const [toDos, setToDos] = useState([]);
  const onChange = (event) => setToDo(event.target.value);
  const onSubmit = (event) => {
    event.preventDefault();
    if (toDo === "") {
      return;
    }
    setToDo("");
    setToDos((currentArray) => [toDo, ...currentArray]);
  };
  console.log(toDos);

  return (
    <div>
      <h1>My To Dos({toDos.length})</h1>
      <form onSubmit={onSubmit}>
        <input
          onChange={onChange}
          value={toDo}
          type="text"
          placeholder="write your to o..."
        />
        <button>Add To Do</button>
      </form>
    </div>
  );
}

export default App;
========To Do list

import { useState } from "react";

function App() {
  const [toDo, setToDo] = useState("");
  const [toDos, setToDos] = useState([]);
  const onChange = (event) => setToDo(event.target.value);
  const onSubmit = (event) => {
    event.preventDefault();
    if (toDo === "") {
      return;
    }

    setToDos((currentArray) => [toDo, ...currentArray]);
    setToDo("");
  };
  console.log(toDos.map((item, index) => <li key={index}>{item}</li>));
  
  return (
    <div>
      <h1>My To Dos({toDos.length})</h1>
      <form onSubmit={onSubmit}>
        <input
          onChange={onChange}
          value={toDo}
          type="text"
          placeholder="write your to o..."
        />
        <button>Add To Do</button>
      </form>
      <hr />
      {toDos.map((item, index) => (
        <li key={index}>{item}</li>
      ))}
    </div>
  );
}

export default App;
===== to do list 2